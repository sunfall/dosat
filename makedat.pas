program makedat;

{ make files of hommx data }

uses Graph, LowGr, Heroes, Monsters, Spells;

const
  MonsterGraphics: array [1..10 * 6] of TGraphic =
  (
    ('..........', { bunny }
     '....*.....',
     '.....*....',
     '.....*....',
     '.....***..',
     '.....***..',
     '.*.***....',
     '..****....',
     '..***.....',
     '...****...'),
    ('..........', { giant frog }
     '..........',
     '..........',
     '.......*..',
     '......* *.',
     '...******.',
     '..******..',
     '.*******..',
     '.********.',
     '..*******.'),
    ('..........', { mad turtle }
     '..........',
     '..........',
     '........**',
     '..****..**',
     '.********.',
     '********..',
     '.**..**...',
     '..........',
     '..........'),
    ('..........', { fungus }
     '..******..',
     '.** * * *.',
     '** * * * *',
     '* ********',
     '**..**..**',
     '....**....',
     '....**....',
     '...****...',
     '..**..**..'),
    ('..******..', { carnivorous plant }
     '.********.',
     '**  **  **',
     '**********',
     '.********.',
     '..******..',
     '....**....',
     '....**....',
     '....**....',
     '...****...'),
    ('...***....', { kong }
     '...***....',
     '...***....',
     '....*...*.',
     '.*******..',
     '*..***....',
     '...***....',
     '...***....',
     '..**.**...',
     '.**...**..'),
    ('...***....', { shadow }
     '*..***..*.',
     '**..*..**.',
     '.*******..',
     '..*****...',
     '...***....',
     '...***....',
     '...***....',
     '..***.....',
     '****......'),
    ('..........', { soul thief }
     '..***.....',
     '..***.....',
     '..**......',
     '..*****...',
     '..**......',
     '..**......',
     '..**......',
     '..**......',
     '..***.....'),
    ('..........', { horror }
     '...***....',
     '..*   *...',
     '.*     *..',
     '.* * * *..',
     '.*     *..',
     '*       *.',
     '*       *.',
     '* * * * *.',
     '.*.*.*.*..'),
    ('......***.', { necromancer }
     '.....*****',
     '.***.* * *',
     '.***..***.',
     '..*...***.',
     '.***.*....',
     '*.*.*.....',
     '..*.......',
     '.*.*......',
     '.*.*......'),
    ('..........', { evil fog }
     '..........',
     '.....***..',
     '...******.',
     '..*** * **',
     '.*********',
     '*********.',
     '.*****....',
     '..........',
     '..........'),
    ('...*****..', { death puppet }
     '..*     *.',
     '.* ** ** *',
     '.*       *',
     '..*  *  *.',
     '..** * *..',
     '.* *   *..',
     '*   ***...',
     '   *......',
     '  *.......'),
    ('..........', { shrinking man }
     '..........',
     '..........',
     '..........',
     '....**....',
     '....**....',
     '....*.....',
     '...*.*....',
     '..........',
     '..........'),
    ('...*......', { witch }
     '..***.....',
     '*******...',
     '..***.....',
     '...*...*..',
     '..******..',
     '.*.*...*..',
     '...*...*..',
     '..*.*.***.',
     '..*.*.*.*.'),
    ('......*...', { will-o-wisp }
     '...*......',
     '...*.....*',
     '.**.**....',
     '...*......',
     '...*......',
     '.......*..',
     '..*...*.*.',
     '.......*..',
     '..........'),
    ('..........', { dancing sword }
     '..........',
     '.......*..',
     '......*...',
     '.....*....',
     '..*.*.....',
     '...*......',
     '..*.*.....',
     '..........',
     '..........'),
    ('........*.', { illusionist }
     '......*...',
     '.***.....*',
     '.***...*..',
     '..*...*..*',
     '.***.*..*.',
     '*.*.*.....',
     '..*.......',
     '.*.*......',
     '.*.*......'),
    ('..****....', { cloud giant }
     '..****....',
     '..****..**',
     '...**..***',
     '.*****.**.',
     '*..**.*...',
     '...**.....',
     '..****....',
     '..**.**...',
     '..**..**..'),
    ('..........', { urchin }
     '..........',
     '..........',
     '...***....',
     '...***....',
     '....*.....',
     '...***....',
     '....*.....',
     '...*.*....',
     '..........'),
    ('..........', { lookout }
     '..........',
     '..***.*...',
     '..***.**..',
     '...*..*.*.',
     '..*****.*.',
     '.*.*..**..',
     '...*..*...',
     '..*.*.....',
     '..*.*.....'),
    ('..........', { sneak }
     '..........',
     '...***....',
     '...***....',
     '....*.....',
     '...****...',
     '..*.*.....',
     '....**....',
     '..**..*...',
     '..........'),
    ('..........', { ninja }
     '.***.***..',
     '.....***..',
     '.***..*...',
     '.....***..',
     '***.*.*.*.',
     '......*...',
     '***.**.*..',
     '........*.',
     '..........'),
    ('..........', { assassin }
     '..***.....',
     '..***...*.',
     '...*...*..',
     '.****.*...',
     '...*.*....',
     '...*......',
     '..*.*.....',
     '..*..*....',
     '..........'),
    ('..*****...', { mastermind }
     '.*******..',
     '.** * **..',
     '..*****...',
     '....*.....',
     '...***....',
     '..*.*.*...',
     '....*.....',
     '...*.*.....',
     '...*.*....'),
    ('...****...', { robot }
     '...*  *...',
     '...****...',
     '.*..**....',
     '.********.',
     '....**..*.',
     '....**....',
     '..******..',
     '..**..**..',
     '..**..**..'),
    ('..........', { wobbler }
     '....**....',
     '...*  *...',
     '..*  * *..',
     '..*    *..',
     '.*  *   *.',
     '.*   ****.',
     '.*      *.',
     '..*    *..',
     '...****...'),
    ('***...***.', { whirly }
     '...***....',
     '***.*.***.',
     '....*.....',
     '..*****...',
     '..*** *...',
     '..*****...',
     '..**   ...',
     '..*****...',
     '..........'),
    ('...*****..', { transformer }
     '...*   *..',
     '...*****..',
     '.*..***..*',
     '.*********',
     '....***...',
     '..*******.',
     '..*.....*.',
     '..*.*.*.*.',
     '.**.*.*.**'),
    ('...***....', { steamroller }
     '...***....',
     '....*.....',
     '...***....',
     '.*******..',
     '.*****  *.',
     '.**** ** *',
     '.**** ** *',
     '* *..*  *.',
     '.*....**..'),
    ('..****....', { laser }
     '.** * **..',
     '.*********',
     '.*******..',
     '...***....',
     '...**.....',
     '...**.....',
     '.******...',
     '.**..**...',
     '.**..**...'),
    ('..........', { lab assistant }
     '..........',
     '.....***..',
     '.....***..',
     '....*.....',
     '...***....',
     '..*.*.*...',
     '....*.....',
     '...*.*.....',
     '..*..*....'),
    ('.*....***.', { pygmy dragon }
     '**...*** *',
     '*...******',
     '**.*****  ',
     '.****..***',
     '.****.....',
     '******....',
     '**....*...',
     '**........',
     '.**.......'),
    ('.......**.', { mimic }
     '.***..** *',
     '*****.****',
     '* * *.**  ',
     '*****..***',
     '.*******..',
     '...***....',
     '..******..',
     '.**.*..*..',
     '**..**.**.'),
    ('..........', { blob }
     '..........',
     '.***......',
     '*****.....',
     '** * *....',
     '.*****....',
     '..***.....',
     '..****....',
     '.*******..',
     '**********'),
    ('..........', { headless }
     '..........',
     '..........',
     '....**...*',
     '.********.',
     '*..****...',
     '...****...',
     '...****...',
     '..**..**..',
     '..**..**..'),
    ('.***......', { mad scientist }
     '.***......',
     '..*...* *.',
     '..*...* *.',
     '.****** *.',
     '*.*...* *.',
     '..*..*   *',
     '.*.*.*****',
     '.*.*......',
     '.*.*......'),
(*  ('..***.....', { scorpion }
     '.**.**....',
     '.*...*....',
     '.*..*..*..',
     '.**...**..',
     '.*****....',
     '..****....',
     '...****.*.',
     '...**..*..',
     '.*....*.*.'), *)

    ('..........', { scorpion }
     '.**.......',
     '*..*......',
     '*.*.......',
     '*.........',
     '.**.....**',
     '.****..*..',
     '.******...',
     '*.*.****..',
     '*.*.*.*.**'),

    ('...* **...', { mummy }
     '... ** ...',
     '...** *...',
     '...* *....',
     '... ** *..',
     '...** **..',
     '...* *....',
     '... **....',
     '...** *...',
     '...* **...'),
    ('***.......', { vulture }
     '.***......',
     '..***..**.',
     '..********',
     '*.*****...',
     '********..',
     '**...****.',
     '*......***',
     '.........*',
     '..........'),
    ('....***...', { djinn }
     '....***...',
     '..*..*..*.',
     '...*****..',
     '.....*....',
     '.*...*....',
     '....*...*.',
     '..**......',
     '*......*..',
     '....*.....'),
    ('......***.', { guardian }
     '.....*****',
     '.....*** *',
     '.....*****',
     '....***  .',
     '..*******.',
     '.*******..',
     '*********.',
     '**********',
     '******.***'),
    ('..........', { slaver }
     '..........',
     '.***....*.',
     '.***...*.*',
     '..*...*..*',
     '.***.*..*.',
     '*.*.*.....',
     '..*.......',
     '.*.*......',
     '.*.*......'),
    ('..........', { giant rat }
     '.......**.',
     '......****',
     '..******..',
     '.*******..',
     '*********.',
     '*..**...**',
     '.*........',
     '..****....',
     '..........'),
    ('..........', { mosquito cloud }
     '.*.*......',
     '..*...*.*.',
     '.......*..',
     '...*.*....',
     '....*.....',
     '.......*.*',
     '*.*.....*.',
     '.*........',
     '..........'),
    ('......**..', { electric eel }
     '.....****.',
     '....**** .',
     '....*****.',
     '.....***..',
     '......***.',
     '..***..***',
     '.*****.***',
     '***.*****.',
     '**...***..'),
    ('..*.......', { flying slug }
     '.***...*.*',
     '.****...*.',
     '..***..***',
     '...***.***',
     '.********.',
     '********..',
     '*******...',
     '.****.....',
     '..........'),
    ('.***.***..', { two-headed giant }
     '.***.***..',
     '.***.***..',
     '...*.*....',
     '.*******..',
     '*..***..*.',
     '...***....',
     '...***....',
     '..**.**...',
     '..**.**...'),
    ('.......***', { fire duiker }
     '.......***',
     '.*.....*..',
     '*.*....*..',
     '..******..',
     '..******..',
     '.*.*...*..',
     '.*.*...*..',
     '.*..*...*.',
     '.*..*...*.'),
    ('.*........', { magician }
     '..**......',
     '...**.....',
     '...***....',
     '..*****...',
     '...***....',
     '.*..*..*..',
     '..*****...',
     '....*.....',
     '...*.*....'),
    ('...***....', { ringmaster }
     '...***....',
     '..*****..*',
     '...***..**',
     '.*..*..*.*',
     '..*****..*',
     '....*....*',
     '....*...*.',
     '...*.*....',
     '...*.*....'),
    ('..........', {  clown car }
     '..........',
     '.***......',
     '.*..*.....',
     '.*...*....',
     '.*...*....',
     '.********.',
     '.********.',
     '**********',
     '.**....**.'),
    ('..........', { lion }
     '..........',
     '..........',
     '......****',
     '*.....****',
     '.*********',
     '.******...',
     '*.*...*...',
     '*..*...*..',
     '..........'),
    ('..........', { elephant }
     '.......**.',
     '......****',
     '....******',
     '.*********',
     '********.*',
     '********.*',
     '********..',
     '**....**..',
     '**....**..'),
    ('..........', { fire-eater }
     '.........*',
     '..***..*..',
     '..***.*..*',
     '...*...*..',
     '..****...*',
     '.*.*......',
     '...*......',
     '..*.*.....',
     '..*.*.....'),
    ('..........', { angry villager }
     '......*.*.',
     '..***.*.*.',
     '..***..*..',
     '...*...*..',
     '..******..',
     '.*.*...*..',
     '...*...*..',
     '..*.*.....',
     '..*.*.....'),
    ('..........', { skulk }
     '.***......',
     '*** *.....',
     '.***..***.',
     '..*..*** *',
     '..*...***.',
     '.***..*...',
     '.*******..',
     '*.*.*.*.*.',
     '*.*.*.*.*.'),
    ('..........', { priest }
     '...***....',
     '...***..*.',
     '....*..***',
     '...***..*.',
     '...******.',
     '...*****..',
     '...*****..',
     '..*****...',
     '*****.....'),
    ('......**..', { vile duck }
     '*....****.',
     '**..*** *.',
     '***.******',
     '.**..***.*',
     '..**.**...',
     '..*****...',
     '.*****....',
     '.****.....',
     '**........'),
    ('..........', { werewolf }
     '..........',
     '...***....',
     '...***....',
     '....*.....',
     '...***....',
     '..*.*.*...',
     '....*.....',
     '...*.*....',
     '...*.*....'),
    ('*...***..*', { serpent angel }
     '**..***.**',
     '***.**.***',
     '.********.',
     '..******..',
     '....**....',
     '.....**...',
     '.***..**..',
     '********..',
     '**.****...')
  );

  MapGraphics: array [1..71] of TGraphic =
  (
    ('..........', { mResource }
     '.******...',
     '.*******..',
     '.**....**.',
     '.********.',
     '.*******..',
     '.**..**...',
     '.**...**..',
     '.**....**.',
     '..........'),
    ('........*.', { mEasyResource }
     '.******...',
     '.*******..',
     '.**....**.',
     '.********.',
     '.*******..',
     '.**..**..*',
     '.**...**..',
     '.**.*..**.',
     '..........'),
    ('..........', { mEasyTreasure }
     '.********.',
     '.********.',
     '....**....',
     '.*..**....',
     '....**.*..',
     '..*.**....',
     '....**....',
     '....**....',
     '..........'),
    ('....*.*...', { mBag }
     '.....*....',
     '...*****..',
     '..*******.',
     '..***  **.',
     '.***  ****',
     '.****  ***',
     '.***  ****',
     '.*********',
     '..*******.'),
    ('.********.', { chest }
     '.*      *.',
     '..*      *',
     '..********',
     '.*      **',
     '******** *',
     '*      * *',
     '*      * *',
     '*      **.',
     '********..'),
    ('..******..', { barrel }
     '.**    **.',
     '.* **** *.',
     '.*      *.',
     '.*      *.',
     '.**    **.',
     '.* **** *.',
     '.*      *.',
     '.**    **.',
     '..******..'),
    ('........**', { artifact }
     '.......* *',
     '......* *.',
     '*....* *..',
     '**..* *...',
     '.*** *....',
     '..* *.....',
     '.****.....',
     '***.**....',
     '**...**...'),
    ('.*........', { camp }
     '.***..**..',
     '.*********',
     '.*******..',
     '.*..**....',
     '.*........',
     '.*........',
     '.*........',
     '.*........',
     '.*........'),
    ('....**....', { charm }
     '....**....',
     '....**....',
     '....**....',
     '...****...',
     '..******..',
     '.********.',
     '.********.',
     '..******..',
     '...****...'),
    ('..........', { monster }
     '..........',
     '.......***',
     '.*.....***',
     '..******..',
     '..******..',
     '.*.*...*..',
     '.*..*...*.',
     '..........',
     '..........'),
    ('..........', { hard monster }
     '.......***',
     '*......***',
     '.*********',
     '.*******..',
     '.*******..',
     '.*******..',
     '*.*....*..',
     '*..*....*.',
     '..........'),
    (#$10#$10#$43#$43#$43#$43#$43#$43#$10#$10, { oak tree }
     #$10#$43#$A5#$43#$A5#$43#$A5#$43#$43#$10,
     #$43#$A5#$43#$A5#$43#$A5#$43#$43#$A5#$43,
     #$43#$A5#$43#$A5#$43#$43#$A5#$43#$A5#$43,
     #$10#$43#$A5#$43#$A5#$43#$43#$A5#$43#$10,
     #$10#$10#$43#$43#$43#$43#$43#$43#$10#$10,
     #$10#$10#$10#$10#$70#$70#$10#$10#$10#$10,
     #$10#$10#$10#$10#$70#$70#$10#$10#$10#$10,
     #$10#$10#$10#$10#$70#$70#$10#$10#$10#$10,
     #$10#$10#$10#$70#$70#$70#$70#$10#$10#$10),
    ('....*.....', { pine tree }
     '....**....',
     '...***....',
     '...****...',
     '..*****...',
     '..******..',
     '.********.',
     '..******..',
     '....  ....',
     '....  ....'),
    ('.......**.', { jungle tree }
     '..***.*..*',
     '.*...*....',
     '*..******.',
     '..*... ..*',
     '.*...  ...',
     '.....  ...',
     '....  ....',
     '...  .....',
     '..   .....'),
    ('....*.....', { mountain }
     '....**....',
     '...***....',
     '...****...',
     '..******..',
     '..**** *..',
     '.** * * *.',
     '.* * * **.',
     '* * * * **',
     '** * * * *'),
    ('..........', { hill }
     '..........',
     '..........',
     '...***....',
     '..** ***..',
     '.** *****.',
     '**********',
     '..........',
     '..........',
     '..........'),
    ('....*.....', { mine entrance }
     '....**....',
     '...***....',
     '...****...',
     '..******..',
     '..******..',
     '.********.',
     '.***  ***.',
     '***    ***',
     '**      **'),
    ('..........', { mine cart }
     '..........',
     '..........',
     '**********',
     '*        *',
     '*        *',
     '*        *',
     '.*      *.',
     '..******..',
     '.**....**.'),
    ('.....**.**', { mine house }
     '.....*****',
     '.....*   *',
     '.....*   *',
     '. ...*   *',
     '. ...*   *',
     '.  ..*   *',
     '  ...*   *',
     '. .. *   *',
     '. .  *****'),
    ('..........', { mine house right }
     '..........',
     '... ......',
     '..   .....',
     '.     ....',
     '  ***   ..',
     ' *****   .',
     ' ***** *  ',
     ' ***** ** ',
     '          '),
    ('......*...', { mana bolt }
     '.....**...',
     '....**....',
     '...***....',
     '..******..',
     '..******..',
     '....***...',
     '....**....',
     '...**.....',
     '...*......'),
    ('.....*....', { dwelling }
     '....* *...',
     '...*   *..',
     '..*     *.',
     '.*********',
     '.*       *',
     '.*       *',
     '.*       *',
     '.*       *',
     '.*********'),
    ('..........', { school }
     '....**....',
     '....**....',
     '...****...',
     '..*    *..',
     '.*      *.',
     '.*      *.',
     '.*      *.',
     '.**    **.',
     '.********.'),
    ('..........', { spell pavilion }
     '....***...',
     '...*...*..',
     '..*..*..*.',
     '.*..* *..*',
     '.*.*   *.*',
     '.*.*   *.*',
     '.*.*   *.*',
     '.*.*   *.*',
     '.*.*   *.*'),
    ('.....*....', { Monument }
     '....*.*...',
     '...*...*..',
     '.**.. ..**',
     '.*.. . ..*',
     '.*... ...*',
     '.**.....**',
     '.*********',
     '.*********',
     '...*****..'),
    ('.....*....', { shrine }
     '....***...',
     '.....*....',
     '...*****..',
     '..**   **.',
     '.**     **',
     '.*       *',
     '.*       *',
     '.*       *',
     '.*********'),
    ('..........', { altar }
     '....  ....',
     '...    ...',
     '...    ...',
     '...    ...',
     '...    ...',
     '...    ...',
     '..******..',
     '.********.',
     '**********'),
    (#$10#$10#$10#$10#$10#$10#$10#$10#$49#$10, { sage hut }
     #$10#$10#$10#$10#$49#$10#$10#$49#$49#$49,
     #$10#$10#$10#$49#$49#$49#$10#$10#$70#$10,
     #$10#$10#$10#$10#$70#$10#$10#$70#$10#$10,
     #$10#$10#$70#$10#$10#$70#$70#$10#$10#$10,
     #$10#$70#$70#$70#$10#$10#$70#$70#$10#$10,
     #$70#$70#$70#$70#$70#$10#$10#$70#$70#$10,
     #$70#$8C#$8C#$8C#$70#$10#$10#$70#$70#$10,
     #$70#$8C#$8C#$8C#$70#$10#$70#$70#$10#$10,
     #$70#$70#$70#$70#$70#$10#$70#$70#$10#$10),
    ('..........', { junk merchant }
     '......*...',
     '.....***..',
     '....*****.',
     '..********',
     '.***     *',
     '****     *',
     '*  *     *',
     '*  *     *',
     '**********'),
    ('..........', { library }
     '**********',
     '* *    * *',
     '* *    * *',
     '* *    * *',
     '* *    * *',
     '* *    * *',
     '* *    * *',
     '**********',
     '..........'),
    ('..  ..  ..', { watchtower }
     '..  ..  ..',
     '..      ..',
     '.. **** ..',
     '.. **** ..',
     '.. **** ..',
     '.. **** ..',
     '.. **** ..',
     '.. **** ..',
     '..      ..'),
    ('..........', { eye }
     '..........',
     '...****...',
     '.** ** **.',
     '*  ****  *',
     '*  ****  *',
     '.** ** **.',
     '...****...',
     '..........',
     '..........'),
    ('.**.*.**..', { castle left }
     '.*******.*',
     '.*     *.*',
     '.*     ***',
     '.*     ***',
     '.*     ***',
     '.*     **.',
     '.*     **.',
     '.*     *..',
     '.*******..'),
    ('****..****', { castle up left }
     '*  ****   ',
     '*         ',
     '*         ',
     '*         ',
     '*         ',
     '*         ',
     '*         ',
     '*         ',
     '**********'),
    ('..........', { cache }
     '**..**..**',
     '**..**..**',
     '**..**..**',
     '**********',
     '**********',
     '**********',
     '**********',
     '**********',
     '**********'),
    ('....  ....', { hero }
     '....  ....',
     '.... .....',
     '....  .***',
     '.*.. ..***',
     '..** *****',
     '..*** **..',
     '..******..',
     '.*.*...*..',
     '.*..*...*.'),
    ('....*.....', { snowy mountain }
     '....**....',
     '...***....',
     '...****...',
     '..*** **..',
     '.. *** *..',
     '. * * *  .',
     '.  * *   .',
     '          ',
     '          '),
    ('*.........', { twisty tree }
     '.*......*.',
     '.*....**..',
     '..*..**...',
     '...***....',
     '....**....',
     '.....**...',
     '.....**...',
     '....**....',
     '...***....'),
    ('.  ..   ..', { willow tree }
     '         .',
     ' *     * .',
     ' *     . .',
     ' . *** ...',
     '.. .***...',
     '.....***..',
     '.....***..',
     '....***...',
     '....***...'),
    ('...    ...', { elm tree }
     '.         ',
     '        * ',
     '  *    *  ',
     '.  *  *  .',
     '...*..*...',
     '....**....',
     '....**....',
     '....**....',
     '...****...'),
    ('**.**.**..', { tower right }
     '********..',
     '********..',
     '**    **..',
     '**    **..',
     '**    **..',
     '**    **..',
     '**    **..',
     '********..',
     '********..'),
    ('..........', { tower left }
     '..........',
     '..........',
     '.......*..',
     '......***.',
     '.....*****',
     '**********',
     '*        *',
     '* * *    *',
     '**********'),
    ('....*.....', { hermit hut }
     '....**....',
     '...***....',
     '...****...',
     '..******..',
     '..******..',
     '.********.',
     '.********.',
     '****  ****',
     '***    ***'),
    ('..........', { upgrade fort }
     '..........',
     '..........',
     '*.*....*.*',
     '***....***',
     '* *....* *',
     '* **..** *',
     '* ****** *',
     '* * ** * *',
     '**********'),
    (#$10#$10#$10#$10#$6F#$10#$10#$10#$10#$10, { snowy pine tree }
     #$10#$10#$10#$10#$6F#$6F#$10#$10#$10#$10,
     #$10#$10#$10#$6F#$6F#$6F#$10#$10#$10#$10,
     #$10#$10#$10#$6F#$6F#$6F#$6F#$10#$10#$10,
     #$10#$10#$10#$6F#$6F#$6F#$6F#$10#$10#$10,
     #$10#$10#$6F#$6F#$40#$6F#$40#$6F#$10#$10,
     #$10#$10#$6F#$40#$40#$40#$6F#$40#$10#$10,
     #$10#$6F#$40#$40#$40#$40#$40#$40#$40#$10,
     #$10#$10#$10#$10#$70#$70#$10#$10#$10#$10,
     #$10#$10#$10#$10#$70#$70#$10#$10#$10#$10),
    ('....*.....', { green mountain }
     '....**....',
     '...***....',
     '...****...',
     '..*** **..',
     '.. *** *..',
     '. * * *  .',
     '.  * *   .',
     '          ',
     '          '),
    ('...*..*...', { twisty tree #2 }
     '.*.*.*..*.',
     '..*.*..*..',
     '*.*.*.*..*',
     '.*.***.**.',
     '..*****...',
     '...***....',
     '...***....',
     '...***....',
     '..*****...'),
    (#$2E#$2E#$2E#$2E#$FB#$2E#$2E#$2E#$2E#$2E, { ship }
     #$2E#$2E#$2E#$2E#$FB#$FB#$2E#$2E#$2E#$2E,
     #$2E#$2E#$2E#$FB#$FB#$FB#$FB#$2E#$2E#$2E,
     #$2E#$2E#$2E#$FB#$FB#$FB#$FB#$FB#$2E#$2E,
     #$2E#$2E#$FB#$FB#$FB#$FB#$FB#$FB#$FB#$2E,
     #$2E#$2E#$2E#$2E#$79#$2E#$2E#$2E#$2E#$2E,
     #$79#$79#$79#$79#$79#$79#$79#$79#$79#$79,
     #$79#$79#$79#$79#$79#$79#$79#$79#$79#$2E,
     #$2E#$79#$79#$79#$79#$79#$79#$79#$2E#$2E,
     #$2E#$2E#$79#$79#$79#$79#$79#$2E#$2E#$2E),
    ('......... ', { banana }
     '.........*',
     '........**',
     '.......**.',
     '......***.',
     '.....***..',
     '....***...',
     '..****....',
     '****......',
     '..........'),
    ('...***....', { tombstone }
     '..*****...',
     '.*******..',
     '.*******..',
     '.**   **..',
     '.*******..',
     '.**   **..',
     '.*******..',
     '.*******..',
     '.*******..'),
    ('  ...... .', { windmill }
     '.  .*..  .',
     '.. ***  ..',
     '..* * *...',
     '..** **...',
     '.** * **..',
     '.  *** *..',
     '  ****  ..',
     ' ******  .',
     '.*******..'),
    ('..........', { volcano }
     '..........',
     '...*  *...',
     '...** **..',
     '..*** **..',
     '..***  **.',
     '.***  * *.',
     '.** *** *.',
     '*** **  **',
     '** **  * *'),
    ('...****...', { branch tree }
     '.********.',
     '**********',
     '****.. . *',
     '* . .   ..',
     '..    ....',
     '....  ....',
     '...  .....',
     '...  .....',
     '..    ....'),
    ('...*......', { bush }
     '..***.....',
     '..***...*.',
     '... ...***',
     '.*.. ..***',
     '***. ... .',
     '***.. . ..',
     '. ... . ..',
     '..     ...',
     '.....  ...'),
    (#$10#$10#$10#$44#$10#$44#$10#$10#$45#$44, { birch }
     #$10#$45#$44#$44#$44#$10#$44#$45#$44#$10,
     #$44#$44#$44#$10#$45#$44#$10#$44#$44#$10,
     #$10#$10#$45#$44#$44#$45#$6F#$44#$10#$10,
     #$10#$44#$6F#$10#$6F#$6F#$10#$10#$10#$10,
     #$10#$10#$10#$6F#$6F#$28#$10#$10#$10#$10,
     #$10#$10#$10#$10#$6F#$6F#$10#$10#$10#$10,
     #$10#$10#$10#$10#$28#$6F#$10#$10#$10#$10,
     #$10#$10#$10#$10#$6F#$6F#$10#$10#$10#$10,
     #$10#$10#$10#$10#$6F#$6F#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$10#$10#$10#$10#$10#$10, { snow-tree mountain }
     #$10#$10#$10#$6F#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$6F#$6F#$10#$10#$10#$10#$10,
     #$10#$10#$6F#$6C#$6F#$10#$10#$10#$10#$10,
     #$10#$10#$6C#$6F#$6C#$6F#$10#$10#$10#$10,
     #$10#$6C#$6C#$6C#$6C#$6C#$6F#$10#$10#$10,
     #$10#$6C#$6C#$6C#$6C#$6C#$6C#$10#$10#$10,
     #$10#$6C#$40#$40#$6C#$6C#$6C#$6C#$10#$10,
     #$6C#$40#$40#$40#$40#$40#$6C#$6C#$6C#$10,
     #$40#$40#$40#$40#$40#$40#$40#$40#$6C#$6C),
    (#$10#$10#$10#$10#$10#$10#$10#$10#$10#$10, { rocky }
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$2A#$2A#$10#$10,
     #$10#$10#$2A#$2A#$10#$2A#$6C#$6C#$2A#$10,
     #$10#$2A#$6C#$6C#$2A#$6C#$6C#$6C#$2A#$10,
     #$2A#$6C#$6C#$6C#$6C#$2A#$6C#$6C#$6C#$2A,
     #$2A#$6C#$6C#$6C#$6C#$6C#$2A#$6C#$6C#$2A,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$A4#$10#$10#$10#$10#$10, { flowers 1 }
     #$10#$10#$10#$A4#$63#$A4#$10#$10#$10#$10,
     #$10#$A4#$10#$10#$A4#$10#$10#$10#$10#$10,
     #$A4#$63#$A4#$10#$44#$10#$10#$A4#$10#$10,
     #$10#$A4#$44#$10#$44#$10#$A4#$63#$A4#$10,
     #$10#$10#$10#$44#$44#$10#$44#$A4#$10#$10,
     #$10#$10#$10#$10#$44#$44#$10#$10#$10#$10,
     #$10#$10#$10#$10#$44#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$44#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$10#$10#$10#$10#$10#$10, { flowers 2 }
     #$10#$10#$10#$10#$10#$10#$10#$10#$FB#$10,
     #$10#$FB#$10#$10#$10#$10#$10#$FB#$63#$FB,
     #$FB#$63#$FB#$10#$10#$10#$10#$44#$FB#$10,
     #$10#$FB#$44#$10#$10#$10#$44#$10#$10#$10,
     #$10#$10#$10#$44#$10#$44#$10#$10#$10#$10,
     #$10#$10#$10#$44#$10#$44#$10#$10#$10#$10,
     #$10#$10#$10#$10#$44#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$44#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$10#$63#$10#$10#$10#$10, { flowers 3 }
     #$10#$10#$10#$10#$63#$6F#$63#$10#$10#$10,
     #$10#$63#$10#$10#$10#$63#$10#$10#$10#$10,
     #$63#$6F#$63#$10#$10#$44#$10#$10#$63#$10,
     #$10#$63#$44#$10#$10#$44#$10#$63#$6F#$63,
     #$10#$10#$44#$10#$10#$44#$10#$44#$63#$10,
     #$10#$10#$10#$44#$10#$44#$44#$10#$10#$10,
     #$10#$10#$10#$44#$10#$44#$10#$10#$10#$10,
     #$10#$10#$10#$44#$10#$44#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$37#$10#$10#$10#$10#$10, { big mtn 1 }
     #$10#$10#$10#$10#$37#$3F#$10#$10#$10#$10,
     #$10#$10#$10#$38#$37#$3F#$3F#$10#$10#$10,
     #$10#$10#$10#$38#$37#$3F#$3F#$3F#$10#$10,
     #$10#$10#$10#$38#$37#$37#$3F#$3F#$3F#$10,
     #$10#$10#$38#$38#$37#$37#$3F#$3F#$3F#$10,
     #$10#$10#$38#$38#$37#$37#$3F#$3F#$3F#$10,
     #$10#$38#$38#$37#$37#$37#$37#$3F#$3F#$3F,
     #$10#$38#$38#$37#$37#$37#$37#$37#$3F#$3F,
     #$38#$38#$38#$37#$37#$37#$37#$37#$37#$3F),
    (#$10#$10#$10#$10#$10#$38#$38#$38#$37#$37, { big mtn 2 }
     #$10#$10#$10#$10#$10#$38#$38#$37#$37#$37,
     #$10#$10#$10#$10#$38#$38#$38#$37#$37#$37,
     #$10#$10#$10#$10#$38#$38#$38#$37#$37#$37,
     #$10#$10#$10#$38#$38#$38#$38#$37#$37#$37,
     #$10#$10#$10#$38#$38#$38#$34#$34#$34#$37,
     #$10#$10#$38#$38#$38#$34#$34#$34#$34#$34,
     #$10#$10#$38#$38#$38#$34#$34#$34#$34#$34,
     #$10#$38#$38#$38#$34#$34#$34#$34#$34#$34,
     #$38#$38#$38#$34#$34#$34#$34#$34#$34#$34),
    (#$37#$37#$37#$37#$37#$10#$10#$10#$10#$10, { big mtn 3 }
     #$37#$37#$37#$37#$37#$37#$10#$10#$10#$10,
     #$37#$37#$37#$37#$37#$37#$10#$10#$10#$10,
     #$37#$37#$37#$37#$37#$37#$10#$10#$10#$10,
     #$37#$37#$37#$37#$37#$37#$37#$10#$10#$10,
     #$37#$37#$37#$37#$37#$37#$37#$10#$10#$10,
     #$34#$37#$37#$37#$37#$37#$37#$37#$10#$10,
     #$34#$34#$37#$37#$37#$37#$37#$37#$10#$10,
     #$34#$34#$34#$34#$37#$37#$37#$37#$37#$10,
     #$34#$34#$34#$34#$34#$37#$37#$37#$37#$37),
    (#$10#$10#$10#$10#$10#$10#$10#$10#$10#$10, { rock decor 1 }
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$2A#$2A#$10#$10,
     #$10#$10#$2A#$2A#$10#$2A#$6C#$6C#$2A#$10,
     #$10#$2A#$6C#$6C#$2A#$6C#$6C#$6C#$2A#$10,
     #$2A#$6C#$6C#$6C#$6C#$2A#$6C#$6C#$6C#$2A,
     #$2A#$6C#$6C#$6C#$6C#$6C#$2A#$6C#$6C#$2A,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$10#$10#$10#$10#$10#$10, { rock decor 2 }
     #$10#$10#$10#$10#$6A#$6C#$10#$10#$10#$10,
     #$10#$10#$10#$2A#$6A#$6C#$6C#$10#$10#$10,
     #$10#$10#$10#$2A#$6A#$6C#$6C#$6C#$10#$10,
     #$10#$10#$10#$2A#$6A#$6A#$6C#$6C#$10#$10,
     #$10#$10#$2A#$2A#$6A#$6A#$6C#$6C#$6C#$10,
     #$10#$10#$2A#$2A#$6A#$6A#$6C#$6C#$6C#$10,
     #$10#$2A#$2A#$6A#$6A#$6A#$6A#$6C#$6C#$6C,
     #$10#$2A#$2A#$6A#$6A#$6A#$6A#$6A#$6C#$6C,
     #$10#$10#$2A#$6A#$6A#$6A#$6A#$6A#$6A#$10),
    (#$10#$10#$10#$10#$10#$10#$6C#$10#$10#$10, { rock decor 3 }
     #$10#$10#$10#$10#$10#$2A#$6C#$6C#$10#$10,
     #$10#$10#$10#$10#$2A#$2A#$6A#$6C#$10#$10,
     #$10#$10#$10#$10#$2A#$6A#$6A#$6C#$6C#$10,
     #$10#$10#$10#$10#$10#$6A#$6A#$6C#$10#$10,
     #$10#$10#$2A#$6C#$10#$10#$10#$10#$10#$10,
     #$10#$2A#$2A#$6C#$6C#$10#$10#$10#$10#$10,
     #$2A#$2A#$6A#$6A#$6C#$6C#$10#$10#$10#$10,
     #$10#$2A#$6A#$6A#$6C#$10#$10#$10#$10#$10,
     #$10#$10#$10#$10#$10#$10#$10#$10#$10#$10),
    (#$10#$10#$10#$10#$10#$10#$10#$A0#$A0#$10, { miner }
     #$10#$10#$10#$10#$10#$10#$10#$A0#$A0#$10,
     #$10#$10#$10#$10#$10#$10#$10#$A0#$A0#$10,
     #$10#$10#$10#$10#$10#$10#$10#$A0#$A0#$10,
     #$10#$10#$70#$10#$10#$70#$70#$70#$70#$70,
     #$10#$70#$70#$70#$10#$70#$72#$72#$72#$70,
     #$70#$70#$70#$70#$70#$70#$72#$72#$72#$70,
     #$70#$72#$72#$72#$72#$72#$72#$72#$72#$70,
     #$70#$72#$72#$72#$72#$72#$72#$72#$72#$70,
     #$70#$70#$70#$70#$70#$70#$70#$70#$70#$70),
    ('..........', { witch's hut }
     '.....*....',
     '....* *...',
     '...*   *..',
     '..*******.',
     '..*     *.',
     '..*     *.',
     '..*******.',
     '...*...*..',
     '...*...*..'),
    ('.....*....', { magician's home }
     '....* *...',
     '....* *...',
     '...*   *..',
     '...*   *..',
     '..*     *.',
     '.*********',
     '.* * * * *',
     '.* * * * *',
     '.*********'),
    ('..........', { wizards's house }
     '..........',
     '....***...',
     '....* *...',
     '...*****..',
     '..* * * *.',
     '.*********',
     '.* *   * *',
     '.* *   * *',
     '.*********'),
    ('..........', { house of husbandry }
     '..........',
     '....***...',
     '...* * *..',
     '..* * * *.',
     '.*********',
     '.* *   * *',
     '.* *   * *',
     '.* *   * *',
     '.*********')
  );
(*

    ('..........',
     '..........',
     '..........',
     '..........',
     '...*****..',
     '..* * * *.',
     '.*********',
     '.* *   * *',
     '.* *   * *',
     '.*********'),


    ('..........',
     '..........',
     '..........',
     '..........',
     '......*..*',
     '..*...****',
     '.* *..****',
     '*****.****',
     '*   *.****',
     '*****.****'),

    ('*.*....*.*',
     '***....***',
     '***....***',
     '.***..***.',
     '.***..***.',
     '.********.',
     '.********.',
     '**********',
     '**********',
     '**********'),

    ('..........',
     '......*.*.',
     '......***.',
     '..*...***.',
     '.* *..***.',
     '*   *.***.',
     '**********',
     '*        *',
     '*        *',
     '**********'),
*)
procedure MakePics;
  var
    f: file;
  begin
    assign(f, 'monster.pic');
    rewrite(f, 1);
    blockwrite(f, MonsterGraphics, sizeof(MonsterGraphics));
    close(f);
    assign(f, 'map.pic');
    rewrite(f, 1);
    blockwrite(f, MapGraphics, sizeof(MapGraphics));
    close(f);
  end;

procedure MakeFont;
  const
    GrDriver: integer = VGA;
    GrMode: integer = VGAHi;
  var
    f: file;
    i, x, y, m, n, b: integer;
    font: PFont;
  begin
    New(font);
    InitGraph(GrDriver, GrMode, '');
    SetTextStyle(DefaultFont, HorizDir, 1);
    SetColor(15);

    for i := 32 to 127 do begin
      x := (i mod 16) * 10;
      y := (i div 16) * 10;
      OutTextXY(x, y, chr(i));
      for n := 0 to 7 do begin
        b := 0;
        for m := 0 to 7 do
          if GetPixel(x + m, y + n) = 15 then
            b := b or InvBitTable[m];
        font^[i, n] := b;
      end;
    end;

    CloseGraph;

    assign(f, 'font.pic');
    rewrite(f, 1);
    blockwrite(f, font^, sizeof(font^));
    close(f);
    Dispose(font);
  end;

procedure MakeStrings;
  var
    f: file;
  const
    crGold = #16;
    arthelp: array [1..118] of string[160] =
    (
      'Increases the strength of your damage and conjuring spells.',
      'Increases the strength of your damage and conjuring spells.',
      'Increases the strength of your damage and conjuring spells.',
      'You can use +5 spell points per round.',
      'You gain +10% experience for killing monsters.',
      'Your 1st level troops gain their Specialty ability.',
      'Your spells cost 1 less to cast per spell level.',
      'Your spells with a duration have +2 rounds of duration.',
      'Your spells can have an additional target.',
      'At the start of combat, you gain 2 Witches, if you have space '
      + '(you keep them).',
      'At the start of combat, you gain a Djinn, if you have space '
      + '(you keep it).',
      '+1 Power, +1 Wizardry, and you gain 3 spell points at the start of '
      + 'combat.',
      'Your troops deal +10% damage.',
      'Your troops deal +20% damage.',
      'Your troops deal +30% damage.',
      'Your troops deal +1 damage.',
      '+1 Offense, +1 Defense, and your hero gains 1 movement at the start '
      + 'of combat.',
      'Your hero''s shots deal +50 damage.',
      'Your hero''s shots deal +100 damage.',
      'Your hero''s shots deal +150 damage.',
      'Your hero''s shots deal +50 damage, and cast a minor evil spell.',
      'Your hero''s shots deal +50 damage, and knock back the target.',
      'Your hero''s shots deal +50 damage, and your hero has an extra shot.',
      'Your hero''s shots deal +50 damage, and set the target on fire.',
      '+2 Archery, +1 Healing, and +5% experience from killing monsters.',
      'Your hero''s shots deal +100 damage, and poison the target.',
      'Your troops have +10% hit points.',
      'Your troops have +20% hit points.',
      'Your troops have +30% hit points.',
      'Your troops have +10% hit points, and are immune to the effects of '
      + 'fire and water on the battlefield.',
      'Your troops have +10% hit points, and can''t damage each other.',
      'Your troops have +2 hit points.',
      'Your troops have +10% hit points, and deal 50 damage to troops that '
      + 'attack them directly.',
      'Your troops with a range attack have +10% hit points, and take only '
      + '10% damage from non-melee attacks.',
      'Your troops with flying have +10% hit points, and heal when they '
      + 'hit an enemy, reviving a dead monster per stack.',
      'Your troops without flying or a range attack have +20% hit points.',
      'Your troops with flying have +30% hit points. Your troops with a '
      + 'range attack deal +30% damage. Your other troops have +1.5 speed.',
      'You have +1 movement per day, and see 1 hex farther.',
      'You have +2 movement per day, and see 2 hexes farther.',
      'You have +3 movement per day, and see 3 hexes farther.',
      'You gain 200 experience points each day.',
      'You gain movement each day based on how far you are from your nearest '
      + 'castle.',
      'You have +2 movement per day, and see 2 hexes farther. You transport '
      + '+300_' + crGold + ' of troops total from castles of your type to '
      + 'your army each day.',
      '+1 Pathfinding, +1 Summoning, and each of your castles produces '
      + '+10 first level creatures each day.',
      'You have +1 movement per day, and see 1 hex farther. You don''t '
      + 'lose movement at the end of a turn, to a max of double movement.',
      'You have +1 movement per day, and see 1 hex farther. If you started '
      + 'the turn in a castle, you have an extra +6 movement.',
      'You have +20 maximum spell points, and gain +3 spell points per day.',
      'You have +40 maximum spell points, and gain +6 spell points per day.',
      'You have +60 maximum spell points, and gain +9 spell points per day.',
      'You produce +200_' + crGold + ' of troops in your army each day.',
      'You produce +400_' + crGold + ' of troops in your army each day.',
      'You produce +600_' + crGold + ' of troops in your army each day.',
      'You learn a 1st or 2nd level spell every 4 days.',
      'Each day you upgrade 4 1st level troops in your army to 2nd level.',
      'Each day you upgrade 3 2nd level troops in your army to 3rd level.',
      'Every 4 days you produce one creature of each type in your army.',
      'Each day you produce 2 1st level creatures of each type in your army.',
      'Each day you produce a creature of each type in your army of one '
      + 'level (cycling through the 6 levels over 6 days).',
      'Each day you produce 1000_' + crGold + '.',
      'Each day you produce 1 '#17'.',
      'Each day you produce a resource, cycling through  '#18', '#19', '
      + #20', '#21', and__'#22'.',
      'Every 7 days you produce a low-level artifact.',
      'Each day you produce 2_' + crGold + ' per troop in your army.',
      'Each day you produce 100_' + crGold + ' per mine you control.',
      'Each day you produce 100_' + crGold + ', and gain 50 experience points '
      + 'and +2 spell points. You have +1 movement.',
      'Your castles produce an extra 50_' + crGold + ' of creatures per '
      + 'square per week, divided by the number of castles you control.',
      'Each day two obstacles total are removed from your castles.',
      'Every 7 days you transform a low-level artifact in your backpack '
      + 'into a medium-level artifact.',
      'Each day nearby map dwellings convert to match your army if possible, '
      + 'and refill with troops for hire.',
      'Each day this builds a 1st level dwelling for free in your most '
      + 'recently acquired castle that can hold one.',
      'When you kill enemy troops, you produce +1 Shadow per 30 kills.',
      'When you kill enemy troops, you produce +2 Shadows per 30 kills.',
      'When you kill enemy troops, you produce +3 Shadows per 30 kills.',
      'At the start of combat, you get +700_' + crGold + ' of troops, '
      + 'which disappear at the end of combat.',
      'At the start of combat, you get +1400_' + crGold + ' of troops, '
      + 'which disappear at the end of combat.',
      'At the start of combat, you get +2100_' + crGold + ' of troops, '
      + 'which disappear at the end of combat.',
      'Your troops have +0.5 speed.',
      'Your 1st level troops have +1 speed.',
      'Your 6th level troops set all adjacent hexes on fire when attacking.',
      'Your troops deal +1 damage per other stack in your army of the same '
      + 'creature type.',
      'At the start of combat, this casts a random minor good spell on one '
      + 'of your stacks.',
      'At the start of combat, this casts a random minor evil spell on an '
      + 'enemy stack.',
      'Whenever your side casts a spell, this deals 25 damage to each enemy '
      + 'stack.',
      'Whenever your side casts a spell, each of your stacks heals 25 hit '
      + 'points.',
      'Whenever your side casts a spell, this kills one creature in each '
      + 'enemy stack.',
      'At the start of each combat round, this casts a random minor evil '
      + 'spell on an enemy stack.',
      'At the start of combat, this casts Magic Bow on your best stack '
      + 'without a range attack.',
      'At the start of combat, this casts Fire Bolt for 100 damage on the '
      + 'best enemy stack.',
      'At the start of combat, this casts Renew on your best stack.',
      'At the start of combat, this casts Zap for 50 damage on the best '
      + 'enemy stack.',
      'At the start of combat, this casts Traitor on the best enemy stack.',
      'At the start of combat, this casts Vampire on your best stack.',
      'At the start of each round after the first, all of your artifacts '
      + 'that cast a spell once recast their spell.',
      'At the start of combat, if you attacked, you gain control of +600_'
      + crGold + ' of enemies that match your army.',
      'At the start of combat, if you attacked, you gain control of +1200_'
      + crGold + ' of enemies that match your army.',
      'At the start of combat, if you attacked, you gain control of +1800_'
      + crGold + ' of enemies that match your army.',
      'Your creatures heal +15 damage each round. At the end of combat, you '
      + 'revive +400_' + crGold + ' of dead troops from a surviving stack.',
      'Your creatures heal +30 damage each round. At the end of combat, you '
      + 'revive +800_' + crGold + ' of dead troops from a surviving stack.',
      'Your creatures heal +45 damage each round. At the end of combat, you '
      + 'revive +1200_' + crGold + ' of dead troops from a surviving stack.',
      '+1 Persuasion, +1 Dark Arts, and your Shadows gain Remove Abilities '
      + 'and Stun.',
      'At the start of each battle, you gain +1 spell point, +66_' + crGold
      + ' of troops, and +0.25 movement.',
      'At the start of each battle, you gain +2 spell points, +132_' + crGold
      + ' of troops, and +0.5 movement.',
      'At the start of each battle, you gain +3 spell points, +200_' + crGold
      + ' of troops, and +0.75 movement.',
      'Left click on this to kill nearby neutral monsters on the map (this '
      + 'uses up the artifact).',
      'Each day you may exchange this for a random medium-level artifact.',
      'Left click on this to teleport to your longest-owned castle on the '
      + 'map (this uses up the artifact).',
      'Left click on this to leave it in a castle you''re at, increasing '
      + 'that castle''s troop production by 100_' + crGold + ' per square per '
      + 'week.',
      'Left click on this to leave it in a castle you''re at, reducing the '
      + 'cost of creatures in that castle by 50%.',
      'Left click on this to leave it in a castle you''re at. All allied '
      + 'troops deal +10% damage while you control that castle.',
      'Left click on this to leave it in a castle you''re at. All allied '
      + 'troops have +10% hit points while you control that castle.',
      'Left click on this to leave it in a castle you''re at. All allied '
      + 'troops have +0.5 speed while you control that castle.',
      'Take this to a castle to sell this for 3000_' + crGold + '.',
      'Take this to a castle to sell this for 6000_' + crGold + '.',
      'Take this to a castle to sell this for 9000_' + crGold + '.',
      'Take this to the location on the map marked with a black dot, to '
      + 'find treasure.',
      'Take this to the location on the map marked with a black dot, to '
      + 'find treasure.',
      'Take this to the location on the map marked with a black dot, to '
      + 'find treasure.',
      'Take this to the location on the map marked with a black dot, to '
      + 'find treasure.'
    );
    FlagMax = 86;
    FlagHelp: array [1..FlagMax] of string[160] =
    (
      'This monster can pass over obstacles.',
      'This monster can jump over one adjacent obstacle as its move.',
      'This monster can move over enemy monsters, and when it does, it '
      + 'attacks them.',
      'This monster can move to any hex adjacent to a plant or plant monster.',
      'This monster can attack monsters it isn''t adjacent to.',
      'This monster can attack flying monsters it isn''t adjacent to.',
      'This monster can attack a monster it isn''t adjacent to, once per '
      + 'combat.',
      'When this monster attacks, it hits all enemies.',
      'This monster can attack a monster it isn''t adjacent to as long as '
      + 'that monster is in the same line of hexes as it.',
      'This monster''s attack also hits each adjacent hex.',
      'This monster''s attack also hits the hex behind the attacked hex.',
      'This monster''s attack also hits the next three hexes behind the '
      + 'attacked hex.',
      'When this monster is melee attacked, it attacks the attacking '
      + 'monster.',
      'This monster can attack monsters it isn''t adjacent to that are '
      + 'within 6 hexes from it.',
      'This monster has flying in odd-numbered rounds and a range attack in '
      + 'even ones.',
      'This monster can move to any hex adjacent to an enemy monster.',
      'This monster can attack and destroy obstacles.',
      'When this monster hits a monster, that hex is set on fire.',
      'If this monster attacks without moving, it can then move and attack '
      + 'again in the same round, once per round.',
      'When this monster attacks, it hits all hexes adjacent to it.',
      'When this monster hits a monster, it throws it to a random hex.',
      'When this monster hits a monster, that monster loses its abilities.',
      'When this monster hits a monster, it copies that monster''s abilities.',
      'When this monster hits a monster, it pushes that monster one hex '
      + 'away from it.',
      'When this monster hits a monster, that monster is stunned (it can''t '
      + 'move during its next turn).',
      'When this monster hits a monster, that monster is hexed (it has its '
      + 'hit points, damage, and speed reduced).',
      'When this monster hits a monster, they trade places.',
      'When this monster hits a monster, that monster is changed to the next '
      + 'lower level of monster.',
      'When this monster hits a monster, it kills an additional enemy per '
      + 'attacking monster.',
      'When this monster hits a monster, that hex is turned to water.',
      'When this monster hits a monster, that monster is split into two '
      + 'stacks, if there''s room.',
      'When this monster attacks, it also attacks the hex behind it.',
      'When this monster kills the last monster in a stack that isn''t Soul '
      + 'Thieves, it summons a friendly Soul Thief on that spot.',
      'When this monster kills the last monster in a stack, it gets another '
      + 'turn, once per round.',
      'When this monster is damaged, its hit points, damage, and speed '
      + 'increase.',
      'At the start of each round after the first, this monster''s hit '
      + 'points, damage, and speed increase.',
      'When a spell is cast, this monster''s hit points, damage, and speed '
      + 'increase.',
      'When this monster is damaged, it teleports to a random hex.',
      'When this monster is damaged, it splits into two stacks, if there''s '
      + 'room.',
      'Each 5 of these monsters that die produce 2 spell points for their '
      + 'hero (if any).',
      'This monster takes only 10% normal damage from non-melee attacks.',
      'This monster turns each hex that it moves over to water.',
      'This monster has 2 illusion copies at the start of combat. It randomly '
      + 'occupies one of the 3 positions. Illusions die when damaged.',
      'When this monster deals damage, it heals an equal number of hit '
      + 'points, regaining dead monsters.',
      'Damage that doesn''t kill one of these monsters is healed immediately.',
      'This monster casts a random friendly spell at the start of its turn.',
      'When a monster attacks this monster, that monster moves as far away '
      + 'in the opposite direction as possible.',
      'When this monster attacks a hex, it also hits an adjacent hex for 1/2 '
      + 'damage, and then a hex adjacent to that for 1/4 damage (it won''t '
      + 'hit itself).',
      'When this monster hits a monster, it takes control of one enemy per '
      + 'attacking monster (if there''s no room, it kills them instead).',
      'When this monster hits a monster, or is hit by one, that monster is '
      + 'poisoned, for 2 damage per round per attacking monster.',
      'When another monster dies, this monster teleports to that hex or '
      + 'adjacent to it, and its hit points, damage, and speed increase.',
      'Heroes get +1 Pathfinding per 30 of these monsters in their armies.',
      'At the start of each week, each stack of these monsters in a hero''s '
      + 'army grows by 10%, and each stack on the map grows by an extra 10%.',
      'When the last monster in this stack is killed, each adjacent hex is '
      + 'set on fire.',
      'This monster never damages monsters on its side.',
      'Damage this monster deals rounds up, always killing a monster.',
      'When this monster is melee attacked, it attacks back for 50 damage.',
      'This monster is not slowed by water.',
      'This monster takes no damage from fire.',
      'This monster may move to any water hex.',
      'This monster may move to any fire hex.',
      'This monster turns each hex that it moves over to fire.',
      'At the start of combat, this monster is surrounded by fire.',
      'When this monster hits a monster, it casts a random evil spell on '
      + 'the damaged monster.',
      'Each 2 of these monsters that die produce 1 spell point for their '
      + 'hero (if any).',
      'When this monster is hit by another monster, that monster loses its '
      + 'abilities.',
      'When this monster is melee attacked, it attacks the attacking '
      + 'monster, once per combat.',
      'When this monster is melee attacked, it attacks back for 100 damage.',
      'When this monster hits a monster, that monster is diseased (it has '
      + 'its hit points, damage, and speed reduced).',
      'When a good spell is cast, it also targets this monster.',
      'Instead of moving, this monster can produce some creatures (if room; '
      + 'you don''t keep them after combat).',
      'When this monster hits a monster, that monster is teleported next to '
      + 'this monster.',
      'This monster attacks three times.',
      'This monster can move 4 hexes more than its speed.',
      'This monster attacks multiple monsters in a line, moving over them.',
      'This monster attacks 2 hexes in every direction.',
      'This monster may move to any hex adjacent to a friendly monster.',
      'This monster casts a random high level friendly spell at the start of '
      + 'its turn.',
      'This monster can switch places with another monster as its move.',
      'This monster improves and gains abilities from killing stacks '
      + '(retaliates, then disease, then poison, then stun).',
      'For each 1 of these monsters in your army, each of your monsters heals '
      + '1 damage each round, and your hero revives an extra 35_' + crGold
      + ' of troops at the end of combat.',
      'Heroes persuade an extra 50_' + crGold + ' of troops per 1 of these '
      + 'in their armies.',
      'When this monster kills the last monster in a stack that isn''t '
      + 'Skulks, it summons a friendly Skulk on that spot.',
      'At the start of combat, you gain 3 monsters of this type.',
      'When attacking, this monster is immune to retaliation, spikes, '
      + 'poison, and the 10% nonmelee damage ability.',
      'When attacked, this monster is immune to poison, stun, remove '
      + 'abilities, and the damage rounds up ability.'
    );
    FlagNames: array [1..FlagMax] of string[21] =
    (
      'Flying',
      'Jumping',
      'Steamrolls Over Stuff',
      'Moves Next To Plants',
      'Range Attack',
      'Range vs. Fliers',
      'One-shot Range Attack',
      'Range Attack vs. All',
      'Range Attack in Line',
      'Area-of-effect Attack',
      'Breath Weapon',
      'Long Breath Weapon',
      'Retaliates vs. Melee',
      'Short Range Attack',
      'Switches Flying/Range',
      '10% Dmgd Unless Melee',
      'Destroys Obstacles',
      'Flaming Attack',
      'Attack-Move-Attack',
      'Attack All Directions',
      'Throws Enemies',
      'Removes Abilities',
      'Copies Abilities',
      'Pushes Enemies',
      'Stuns Enemies',
      'Hexes Enemies',
      'Trades Places',
      'Devolves Enemies',
      'Kills Enemy Per Unit',
      'Dousing Attack',
      'Splits Enemies',
      'Attacks Forward/Back',
      'Raise Dead Enemies',
      'Bonus Attack On Kill',
      'Improves When Damaged',
      'Improves Each Round',
      'Improves With Spells',
      'Teleports When Hit',
      'Splits',
      'Gives Mana When Dying',
      'Moves Next To Enemies',
      'Trail Of Water',
      'Has Illusion Copies',
      'Drains Life',
      'Regenerates When Hit',
      'Casts Friendly Spells',
      'Bounces Attackers',
      'Lightning Attack',
      'Enslaves Enemies',
      'Poison Touch',
      'Feeds On Dead',
      'Pathfinding',
      'Multiplies',
      'Explodes When Dies',
      'Won''t Hurt Friends',
      'Damage Rounds Up',
      '50 Dmg Retaliate',
      'Immune To Water',
      'Immune To Fire',
      'Moves To Water',
      'Moves To Fire',
      'Trail Of Fire',
      'Fire Shield',
      'Curses Enemies',
      'Extra Death Mana',
      'Bewildering',
      'One Retaliate',
      '100 Dmg Retaliate',
      'Diseases Enemies',
      'Copies Good Spells',
      'Makes Creatures',
      'Pulls Enemies',
      'Attacks 3 Times',
      'Moves 4 Extra Hexes',
      'Tramples Over Enemies',
      'Circle Of Fire Breath',
      'Moves Next To Friends',
      'Casts Strong Spell',
      'Trade Places Movement',
      'Changes When Kills',
      'Healing',
      'Persuasion',
      'Raise Skulks',
      'Recruit Each Battle',
      'Offensive Immunities',
      'Defensive Immunities'
    );
    TwistNames: array [1..24] of string[60] =
    (
      'Heroes have +14 movement',
      'Heroes earn double XP',
      'Heroes have +1 of each blue skill',
      'Heroes have a normal maximum of 4 skills',
      'All heroes start with the same random artifact',
      'All heroes start with the same random skill',
      'Starting heroes start with the same random monster stack',
      'When one of your heroes gains XP, they all do',
      'Castles start with more obstacles',
      'Castle dwellings have double cost and production',
      'All castles start with the same random building',
      'Castles buildings decay over time',
      'A random level of castle dwelling only takes one square',
      'Castle creature types are mixed up',
      'All monsters have the same random ability',
      'No range in jungle or flying in snow; slow in wasteland',
      'Players start with an extra hero',
      'Players can only have two heroes',
      'No actions are possible on the last two days of each week',
      'All resource piles are the same',
      'Buildings that improve heroes are one-use',
      'Forests gradually die',
      'Dwellings gradually appear in empty places on the map',
      'Water on the map periodically floods and retreats'
    );
  begin
    assign(f, 'strings.dat');
    rewrite(f, 1);
    blockwrite(f, arthelp, sizeof(arthelp));
    blockwrite(f, FlagHelp, sizeof(FlagHelp));
    blockwrite(f, TwistNames, sizeof(TwistNames));
    blockwrite(f, FlagNames, sizeof(FlagNames));
    close(f);
  end;

procedure MakeHeroes;
  const
    StartData: array [1..10 * 14] of record
      n: string[21];
      sk1, sk2: byte;
      sum: byte;
      sp: byte;
    end =
    (
{ jungle fort }
      (n: 'Snidd';
       sk1: skArchery;
       sk2: skGating;
       sum: moCarnivorousPlant;
       sp:  spSwarm),
      (n: 'Gnarr';
       sk1: skArchery;
       sk2: skSpecialty;
       sum: moGiantFrog;
       sp:  spSwarm),
      (n: 'Darba';
       sk1: skConjuring;
       sk2: skWitchcraft;
       sum: moMadTurtle;
       sp:  spConjure),
      (n: 'Baloth';
       sk1: skSummoning;
       sk2: skExpertise;
       sum: moBunny;
       sp:  spConjure),
      (n: 'Lorian';
       sk1: skSummoning;
       sk2: skGating;
       sum: moGiantFrog;
       sp:  spConjure),
      (n: 'Brackus';
       sk1: skSpellcraft;
       sk2: skWitchcraft;
       sum: moMadTurtle;
       sp:  spConjure),
      (n: 'Undorak';
       sk1: skDefense;
       sk2: skWizardry;
       sum: moFungus;
       sp:  spSwarm),
      (n: 'Gourna';
       sk1: skPathfinding;
       sk2: skSpecialty;
       sum: moBunny;
       sp:  spSwarm),
      (n: 'Kavu';
       sk1: skPathfinding;
       sk2: skInsight;
       sum: moGiantFrog;
       sp:  spSwarm),
      (n: 'Vorine';
       sk1: skPathfinding;
       sk2: skTactics;
       sum: moGiantFrog;
       sp:  spSwarm),
      (n: 'Vorrac';
       sk1: skOffense;
       sk2: skLore;
       sum: moFungus;
       sp:  spSwarm),
      (n: 'Bulvox';
       sk1: skWarcraft;
       sk2: skTactics;
       sum: moBunny;
       sp:  spSwarm),
      (n: 'Garh';
       sk1: skPersuasion;
       sk2: skTactics;
       sum: moBunny;
       sp:  spSwarm),
      (n: 'Murlodont';
       sk1: skDarkArts;
       sk2: skWizardry;
       sum: moMadTurtle;
       sp:  spSwarm),
{ city of shadows }
      (n: 'Raphael';
       sk1: skPower;
       sk2: skWizardry;
       sum: moShadow;
       sp:  spBadLuck),
      (n: 'Gabriel';
       sk1: skPower;
       sk2: skWitchcraft;
       sum: moSoulThief;
       sp:  spWeakness),
      (n: 'Alexandre';
       sk1: skPower;
       sk2: skExpertise;
       sum: moHorror;
       sp:  spBadLuck),
      (n: 'Olivier';
       sk1: skDarkArts;
       sk2: skLeadership;
       sum: moShadow;
       sp:  spBadLuck),
      (n: 'Antoine';
       sk1: skDarkArts;
       sk2: skLore;
       sum: moHorror;
       sp:  spBadLuck),
      (n: 'Nicolas';
       sk1: skSpellcraft;
       sk2: skWizardry;
       sum: moSoulThief;
       sp:  spWeakness),
      (n: 'Florent';
       sk1: skOffense;
       sk2: skSpecialty;
       sum: moSoulThief;
       sp:  spBadLuck),
      (n: 'Pierre';
       sk1: skArchery;
       sk2: skSorcery;
       sum: moNecromancer;
       sp:  spWeakness),
      (n: 'Aurelien';
       sk1: skWarcraft;
       sk2: skAlchemy;
       sum: moHorror;
       sp:  spBadLuck),
      (n: 'Gilles';
       sk1: skArchery;
       sk2: skLore;
       sum: moNecromancer;
       sp:  spBadLuck),
      (n: 'Sylvain';
       sk1: skDefense;
       sk2: skCunning;
       sum: moShadow;
       sp:  spBadLuck),
      (n: 'Romain';
       sk1: skDefense;
       sk2: skExpertise;
       sum: moSoulThief;
       sp:  spBadLuck),
      (n: 'Christophe';
       sk1: skSummoning;
       sk2: skSpecialty;
       sum: moShadow;
       sp:  spBadLuck),
      (n: 'Sebastien';
       sk1: skPersuasion;
       sk2: skSorcery;
       sum: moEvilFog;
       sp:  spWeakness),
{ cloud castle }
      (n: 'Skuld';
       sk1: skPower;
       sk2: skTactics;
       sum: moShrinkingMan;
       sp:  spZap),
      (n: 'Bragi';
       sk1: skPower;
       sk2: skLore;
       sum: moWillOWisp;
       sp:  spZap),
      (n: 'Idun';
       sk1: skPower;
       sk2: skSpecialty;
       sum: moWitch;
       sp:  spZap),
      (n: 'Urd';
       sk1: skSpellcraft;
       sk2: skAlchemy;
       sum: moDancingSword;
       sp:  spGoodLuck),
      (n: 'Aurvandil';
       sk1: skSpellcraft;
       sk2: skCunning;
       sum: moShrinkingMan;
       sp:  spGoodLuck),
      (n: 'Tyr';
       sk1: skOffense;
       sk2: skAlchemy;
       sum: moDancingSword;
       sp:  spGoodLuck),
      (n: 'Heimdallr';
       sk1: skConjuring;
       sk2: skSpecialty;
       sum: moShrinkingMan;
       sp:  spGoodLuck),
      (n: 'Verdandi';
       sk1: skHealing;
       sk2: skSpecialty;
       sum: moWillOWisp;
       sp:  spZap),
      (n: 'Aegir';
       sk1: skHealing;
       sk2: skSorcery;
       sum: moWillOWisp;
       sp:  spZap),
      (n: 'Baldur';
       sk1: skWarcraft;
       sk2: skCunning;
       sum: moWitch;
       sp:  spZap),
      (n: 'Gefjun';
       sk1: skSummoning;
       sk2: skCunning;
       sum: moShrinkingMan;
       sp:  spGoodLuck),
      (n: 'Ullr';
       sk1: skSummoning;
       sk2: skSorcery;
       sum: moWitch;
       sp:  spZap),
      (n: 'Skadi';
       sk1: skPersuasion;
       sk2: skWitchcraft;
       sum: moIllusionist;
       sp:  spGoodLuck),
      (n: 'Hel';
       sk1: skConjuring;
       sk2: skGating;
       sum: moWitch;
       sp:  spGoodLuck),
{ thieves' guild }
      (n: '"Biscuits" O''Malley';
       sk1: skHealing;
       sk2: skLeadership;
       sum: moLookout;
       sp:  spTraitor),
      (n: '"Thunder" Hopkins';
       sk1: skHealing;
       sk2: skTactics;
       sum: moLookout;
       sp:  spTraitor),
      (n: '"Farmstead" Johnson';
       sk1: skHealing;
       sk2: skGating;
       sum: moNinja;
       sp:  spTraitor),
      (n: 'Benny "The Biter"';
       sk1: skOffense;
       sk2: skWitchcraft;
       sum: moSneak;
       sp:  spDeserter),
      (n: 'Kevin "The Carver"';
       sk1: skWarcraft;
       sk2: skInsight;
       sum: moUrchin;
       sp:  spDeserter),
      (n: '"Brains" Ratcliffe';
       sk1: skSpellcraft;
       sk2: skSorcery;
       sum: moLookout;
       sp:  spTraitor),
      (n: '"Savoir" O''Farrell';
       sk1: skDefense;
       sk2: skInsight;
       sum: moAssassin;
       sp:  spDeserter),
      (n: '"Corduroy" Brown';
       sk1: skWarcraft;
       sk2: skWitchcraft;
       sum: moSneak;
       sp:  spDeserter),
      (n: '"Hotfoot" Donovan';
       sk1: skPathfinding;
       sk2: skWizardry;
       sum: moLookout;
       sp:  spDeserter),
      (n: 'Shandy "The Shuttler"';
       sk1: skPathfinding;
       sk2: skCunning;
       sum: moUrchin;
       sp:  spDeserter),
      (n: 'Mickey Istari';
       sk1: skDarkArts;
       sk2: skInsight;
       sum: moSneak;
       sp:  spDeserter),
      (n: '"Cheesecloth" McGinty';
       sk1: skDarkArts;
       sk2: skCunning;
       sum: moUrchin;
       sp:  spDeserter),
      (n: 'Joey "Nickels"';
       sk1: skPersuasion;
       sk2: skLeadership;
       sum: moNinja;
       sp:  spDeserter),
      (n: '"Spats" Martin';
       sk1: skSummoning;
       sk2: skTactics;
       sum: moUrchin;
       sp:  spDeserter),
{ factory }
      (n: 'Deep Thought';
       sk1: skHealing;
       sk2: skWizardry;
       sum: moWobbler;
       sp:  spFury),
      (n: 'HAL';
       sk1: skHealing;
       sk2: skInsight;
       sum: moTransformer;
       sp:  spFury),
      (n: 'Data';
       sk1: skConjuring;
       sk2: skAlchemy;
       sum: moWhirly;
       sp:  spFury),
      (n: 'Tobor';
       sk1: skPersuasion;
       sk2: skGating;
       sum: moTransformer;
       sp:  spBlow),
      (n: 'Robby';
       sk1: skPersuasion;
       sk2: skAlchemy;
       sum: moWhirly;
       sp:  spBlow),
      (n: 'TX-1000';
       sk1: skOffense;
       sk2: skLeadership;
       sum: moWobbler;
       sp:  spBlow),
      (n: 'Rosie';
       sk1: skDefense;
       sk2: skAlchemy;
       sum: moRobot;
       sp:  spBlow),
      (n: 'ED209';
       sk1: skArchery;
       sk2: skExpertise;
       sum: moRobot;
       sp:  spBlow),
      (n: 'Roy';
       sk1: skArchery;
       sk2: skLeadership;
       sum: moWobbler;
       sp:  spBlow),
      (n: 'Pris';
       sk1: skArchery;
       sk2: skWizardry;
       sum: moWobbler;
       sp:  spBlow),
      (n: 'Twiki';
       sk1: skSpellcraft;
       sk2: skLore;
       sum: moWhirly;
       sp:  spFury),
      (n: 'Marvin';
       sk1: skSpellcraft;
       sk2: skExpertise;
       sum: moSteamroller;
       sp:  spFury),
      (n: 'Gort';
       sk1: skSummoning;
       sk2: skWitchcraft;
       sum: moRobot;
       sp:  spFury),
      (n: 'Smith';
       sk1: skDarkArts;
       sk2: skWitchcraft;
       sum: moRobot;
       sp:  spFury),
{ laboratory }
      (n: 'Dr. Doolittle';
       sk1: skPower;
       sk2: skGating;
       sum: moMimic;
       sp:  spGrow),
      (n: 'Dr. Brain';
       sk1: skPower;
       sk2: skCunning;
       sum: moLabAssistant;
       sp:  spGrow),
      (n: 'Dr. Doom';
       sk1: skPower;
       sk2: skInsight;
       sum: moBlob;
       sp:  spGrow),
      (n: 'Dr. Kildare';
       sk1: skDefense;
       sk2: skTactics;
       sum: moMimic;
       sp:  spGrow),
      (n: 'Dr. No';
       sk1: skDefense;
       sk2: skSorcery;
       sum: moHeadless;
       sp:  spShrink),
      (n: 'Dr. Strange';
       sk1: skSpellcraft;
       sk2: skTactics;
       sum: moPygmyDragon;
       sp:  spShrink),
      (n: 'Dr. Moreau';
       sk1: skOffense;
       sk2: skGating;
       sum: moBlob;
       sp:  spGrow),
      (n: 'Dr. T';
       sk1: skPathfinding;
       sk2: skLore;
       sum: moLabAssistant;
       sp:  spGrow),
      (n: 'Dr. Strangelove';
       sk1: skPathfinding;
       sk2: skAlchemy;
       sum: moMimic;
       sp:  spShrink),
      (n: 'Dr. Evil';
       sk1: skPathfinding;
       sk2: skLeadership;
       sum: moPygmyDragon;
       sp:  spGrow),
      (n: 'Dr. Robert';
       sk1: skPersuasion;
       sk2: skInsight;
       sum: moPygmyDragon;
       sp:  spGrow),
      (n: 'Dr. Octopus';
       sk1: skWarcraft;
       sk2: skSpecialty;
       sum: moPygmyDragon;
       sp:  spGrow),
      (n: 'Dr. Jekyll';
       sk1: skWarcraft;
       sk2: skLore;
       sum: moLabAssistant;
       sp:  spGrow),
      (n: 'Dr. Death';
       sk1: skDarkArts;
       sk2: skSorcery;
       sum: moLabAssistant;
       sp:  spShrink),
{ pyramid }
      (n: 'Osiris';
       sk1: skDarkArts;
       sk2: skTactics;
       sum: moScorpion;
       sp:  spHeal),
      (n: 'Anubis';
       sk1: skDarkArts;
       sk2: skSpecialty;
       sum: moScorpion;
       sp:  spHeal),
      (n: 'Set';
       sk1: skDarkArts;
       sk2: skAlchemy;
       sum: moVulture;
       sp:  spHeal),
      (n: 'Ma''at';
       sk1: skConjuring;
       sk2: skWizardry;
       sum: moScorpion;
       sp:  spHeal),
      (n: 'Khnum';
       sk1: skSummoning;
       sk2: skAlchemy;
       sum: moMummy;
       sp:  spHeal),
      (n: 'Horus';
       sk1: skSummoning;
       sk2: skLeadership;
       sum: moVulture;
       sp:  spHeal),
      (n: 'Isis';
       sk1: skSpellcraft;
       sk2: skLeadership;
       sum: moScorpion;
       sp:  spFatigue),
      (n: 'Amun';
       sk1: skSpellcraft;
       sk2: skInsight;
       sum: moMummy;
       sp:  spFatigue),
      (n: 'Ptah';
       sk1: skConjuring;
       sk2: skExpertise;
       sum: moVulture;
       sp:  spFatigue),
      (n: 'Thoth';
       sk1: skHealing;
       sk2: skCunning;
       sum: moMummy;
       sp:  spFatigue),
      (n: 'Ra';
       sk1: skPower;
       sk2: skSorcery;
       sum: moDjinn;
       sp:  spHeal),
      (n: 'Nekhbet';
       sk1: skPersuasion;
       sk2: skLore;
       sum: moGuardian;
       sp:  spHeal),
      (n: 'Nephthys';
       sk1: skPathfinding;
       sk2: skExpertise;
       sum: moMummy;
       sp:  spHeal),
      (n: 'Sobek';
       sk1: skArchery;
       sk2: skWitchcraft;
       sum: moDjinn;
       sp:  spHeal),
{ ruins }
      (n: 'Hector';
       sk1: skOffense;
       sk2: skExpertise;
       sum: moFlyingSlug;
       sp:  spMudball),
      (n: 'Theseus';
       sk1: skConjuring;
       sk2: skTactics;
       sum: moRubberRat;
       sp:  spFly),
      (n: 'Hercules';
       sk1: skOffense;
       sk2: skCunning;
       sum: moMosquitoCloud;
       sp:  spFly),
      (n: 'Achilles';
       sk1: skDefense;
       sk2: skWitchcraft;
       sum: moFlyingSlug;
       sp:  spFly),
      (n: 'Perseus';
       sk1: skDefense;
       sk2: skGating;
       sum: moElectricEel;
       sp:  spFly),
      (n: 'Bellerophon';
       sk1: skDefense;
       sk2: skSpecialty;
       sum: moRubberRat;
       sp:  spFly),
      (n: 'Autolycus';
       sk1: skPathfinding;
       sk2: skGating;
       sum: moRubberRat;
       sp:  spFly),
      (n: 'Odysseus';
       sk1: skWarcraft;
       sk2: skLeadership;
       sum: moMosquitoCloud;
       sp:  spFly),
      (n: 'Orion';
       sk1: skArchery;
       sk2: skCunning;
       sum: moElectricEel;
       sp:  spMudball),
      (n: 'Jason';
       sk1: skConjuring;
       sk2: skInsight;
       sum: moMosquitoCloud;
       sp:  spFly),
      (n: 'Aeneas';
       sk1: skPower;
       sk2: skAlchemy;
       sum: moMosquitoCloud;
       sp:  spFly),
      (n: 'Meleager';
       sk1: skPersuasion;
       sk2: skWizardry;
       sum: moTwoHeadedGiant;
       sp:  spFly),
      (n: 'Nestor';
       sk1: skConjuring;
       sk2: skLore;
       sum: moElectricEel;
       sp:  spMudball),
      (n: 'Orpheus';
       sk1: skHealing;
       sk2: skLore;
       sum: moRubberRat;
       sp:  spMudball),
{ circus }
      (n: 'Bozo';
       sk1: skLeadership;
       sk2: skAlchemy;
       sum: moElephant;
       sp:  spGrow),
      (n: 'Krusty';
       sk1: skSpecialty;
       sk2: skTactics;
       sum: moMagician;
       sp:  spFly),
      (n: 'Pierrot';
       sk1: skWizardry;
       sk2: skSorcery;
       sum: moLion;
       sp:  spGoodLuck),
      (n: 'Harlequin';
       sk1: skCunning;
       sk2: skLore;
       sum: moRingmaster;
       sp:  spZap),
      (n: 'Yorick';
       sk1: skWizardry;
       sk2: skLore;
       sum: moRingmaster;
       sp:  spFly),
      (n: 'Joker';
       sk1: skCunning;
       sk2: skTactics;
       sum: moMagician;
       sp:  spFly),
      (n: 'Chuckles';
       sk1: skSorcery;
       sk2: skInsight;
       sum: moMagician;
       sp:  spFly),
      (n: 'Buttons';
       sk1: skExpertise;
       sk2: skLeadership;
       sum: moMagician;
       sp:  spGoodLuck),
      (n: 'Clarabell';
       sk1: skLeadership;
       sk2: skGating;
       sum: moRingmaster;
       sp:  spGoodLuck),
      (n: 'Pennywise';
       sk1: skInsight;
       sk2: skExpertise;
       sum: moRingmaster;
       sp:  spGrow),
      (n: 'Shakes';
       sk1: skAlchemy;
       sk2: skGating;
       sum: moClownCar;
       sp:  spZap),
      (n: 'Arlecchino';
       sk1: skWitchcraft;
       sk2: skSorcery;
       sum: moLion;
       sp:  spGoodLuck),
      (n: 'Calvero';
       sk1: skSpecialty;
       sk2: skCunning;
       sum: moClownCar;
       sp:  spZap),
      (n: 'Koko';
       sk1: skWizardry;
       sk2: skWitchcraft;
       sum: moClownCar;
       sp:  spGrow),
{ evil temple }
      (n: 'Father O''Flynn';
       sk1: skSummoning;
       sk2: skPathfinding;
       sum: moAngryVillager;
       sp:  spBadLuck),
      (n: 'Father O''Blivion';
       sk1: skSummoning;
       sk2: skDarkArts;
       sum: moSkulk;
       sp:  spBadLuck),
      (n: 'Father O''Calcutta';
       sk1: skDefense;
       sk2: skWarcraft;
       sum: moPriest;
       sp:  spBadLuck),
      (n: 'Father O''Rly';
       sk1: skSpellcraft;
       sk2: skHealing;
       sum: moPriest;
       sp:  spBadLuck),
      (n: 'Father William';
       sk1: skSummoning;
       sk2: skOffense;
       sum: moAngryVillager;
       sp:  spFury),
      (n: 'Sister Disco';
       sk1: skWarcraft;
       sk2: skConjuring;
       sum: moAngryVillager;
       sp:  spFury),
      (n: 'Sister Suzy';
       sk1: skConjuring;
       sk2: skPersuasion;
       sum: moSkulk;
       sp:  spSwarm),
      (n: 'Sister Ray';
       sk1: skPower;
       sk2: skSpellcraft;
       sum: moAngryVillager;
       sp:  spSwarm),
      (n: 'Sister Midnight';
       sk1: skDarkArts;
       sk2: skPower;
       sum: moSkulk;
       sp:  spSwarm),
      (n: 'Sister O''Mercy';
       sk1: skHealing;
       sk2: skDefense;
       sum: moWerewolf;
       sp:  spBlow),
      (n: 'Brother Maynard';
       sk1: skArchery;
       sk2: skHealing;
       sum: moPriest;
       sp:  spFury),
      (n: 'Uncle Ernie';
       sk1: skPersuasion;
       sk2: skOffense;
       sum: moVileDuck;
       sp:  spFury),
      (n: 'Friar Tuck';
       sk1: skOffense;
       sk2: skDefense;
       sum: moVileDuck;
       sp:  spBlow),
      (n: 'Joey the Altar Boy';
       sk1: skPathfinding;
       sk2: skArchery;
       sum: moSkulk;
       sp:  spBlow)
    );
  var
    f: file;
  begin
    assign(f, 'heroes.dat');
    rewrite(f, 1);
    blockwrite(f, StartData, sizeof(StartData));
    close(f);
  end;

procedure Run;
  begin
    MakePics;
    MakeFont;
    MakeStrings;
    MakeHeroes;
  end;

begin
  Run;
end.

